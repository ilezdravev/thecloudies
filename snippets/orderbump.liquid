<style> #obStreamlined { display: none; width: 100%; } #obMulti { display: none; width: 100%; margin-bottom: 5px } .obBodyCheckbox { margin: 0; } .obMainBox .arrow { display: none; } #obAdvanced { display: none; width: 100%; } .obMainBox { position: relative; display: flex; justify-content: space-between; flex-direction: row; align-items: center; width: 100%; font-size: 13px; height: auto; padding: 5px; color: #000; margin-bottom: 5px; } .obMainBox .obImageDiv-wrapper { display: flex; align-items: center; width: 20%; } .obMainBox .obImageDiv-wrapper .obImageDiv { display: flex; width: 75%; justify-content: center; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox { display: block; position: relative; cursor: pointer; font-size: 14px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; height: 25px; overflow: inherit; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox input { position: absolute; opacity: 0; cursor: pointer; height: 0; width: 0; } .obMainBox .obImageDiv-wrapper .obCheckmark { position: absolute; top: 0; left: 0; height: 25px; width: 25px; background-color: #fff; border: 1px solid black; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox:hover input ~ .obCheckmark { background-color: #fff; border: 1px solid black; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox input:checked ~ .obCheckmark { background-color: green; } .obMainBox .obImageDiv-wrapper .obCheckmark:after { content: ''; position: absolute; display: none; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox input:checked ~ .obCheckmark:after { display: block; } .obMainBox .obImageDiv-wrapper .obBodyCheckbox .obCheckmark:after { left: 8px; top: 4px; width: 5px; height: 10px; border: solid white; border-width: 0 3px 3px 0; -webkit-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .obCheck { text-align: left; display: flex; } .obCheck > input { width: 30px; height: 30px; } .obProduct { width: 60%; text-align: left; } .obProduct > span { font-weight: 800; } .obWidget { width: 20%; font-size: 11px; cursor: pointer; } .obWidget #seeDetailsText #seeDetailsText2 { display: flex; justify-content: center; } .seeDetailsText { display: flex; justify-content: center; margin: 0!important } .obSpeechBubbleDs.active { display: block ; } .obSpeechBubbleDs { background: #efefef; border: 1px solid #a7a7a7; -webkit-border-radius: 4px; border-radius: 4px; -webkit-box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.2); box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.2); font-size: 1rem; line-height: 1.3; margin: 0 auto 11px; max-width: 400px; padding: 15px; position: absolute; right: 1px; bottom: 40px; display: none; } #obProductDetails { font-size: 14px; } .obProductDetails { font-size: 14px; } .obPriceText { color: #ff4f2c; padding-left: 3px; } .obPriceTextHide { display: none; } .obBadgeIcon { max-height: 35px; padding-right: 3px; } .obMainText-wrapper { display: flex; align-items: center; width: 100%; margin-left: 9%; } .obMainText-wrapper .obMainText { font-size: 11px; width: 100%; display: flex; justify-content: flex-start; padding-right: 2%; } .hideElement { display: none; } .previewWarning { border: 1px dotted black; padding: 2%; color: red; } .obPreviewButton { background-color: black; color: white; width: 100%; height: 47px; font-family: Roboto; font-size: 14px; border: none; margin-top: 5px; } .obAdSpeechBubbleDs { background: #efefef; border: 1px solid #a7a7a7; -webkit-border-bottom-left-radius: 4px; -webkit-border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; font-size: 1rem; line-height: 1.3; margin: 0 auto; max-width: 400px; padding: 15px; display: none; margin-bottom: 5px; } .obAdSpeechBubbleDs.active { display: block ; } .obAdSpeechBubbleDsArrow { border-left: 21px solid transparent; border-top: 20px solid rgba(0, 0, 0, 0.2); bottom: -25px; position: absolute; right: 15px; } .obAdSpeechBubbleDsArrow::before { border-left: 23px solid transparent; border-top: 23px solid #a7a7a7; bottom: 2px; content: ''; position: absolute; right: 5px; } .obAdSpeechBubbleDsArrow::after { border-left: 21px solid transparent; border-top: 21px solid #efefef; bottom: 4px; content: ''; position: absolute; right: 6px; } .obAdWidget { font-size: 11px; cursor: pointer; } .obAdWidget #seeDetailsText #seeDetailsText2 { display: flex; } #seeDetailsText { margin: 0!important } #seeDetailsText2 { margin: 0!important } .adMainBox { width: 100%; background-color: #fff; border: 1px solid #aeafae; font-size: 12px; color: #000; padding: 10px 20px 20px 20px; margin-bottom: 5px; } .adNameDiv { justify-content: center; display: flex; width: 100%; } .adName { margin-bottom: 12px; font-weight: 700; font-size: 17px; } .adBodyContainer { display: flex; justify-content: flex-start; height: 140px; } .adBodyContainer .arrow { display: none; } .adBodyContainer .adImage img { max-width: 125px; min-width: 130px; margin-right: 16px; } .adImage { display: flex; align-items: center; } .adBodyContainer .adBody { display: flex; flex-direction: column; justify-content: space-evenly; } .adBodyContainer .adBody .adBodyCheckbox { display: block; position: relative; padding-left: 35px; cursor: pointer; font-size: 14px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; height: 25px; overflow: inherit; } .adBodyContainer .adBody .adBodyCheckbox input { position: absolute; opacity: 0; cursor: pointer; height: 0; width: 0; } .adBodyContainer .adBody .checkmark { position: absolute; top: 0; left: 0; height: 25px; width: 25px; background-color: #fff; border: 1px solid black; } .adBodyContainer .adBody .adBodyCheckbox:hover input ~ .checkmark { background-color: #fff; border: 1px solid black; } .adBodyContainer .adBody .adBodyCheckbox input:checked ~ .checkmark { background-color: green; } .adBodyContainer .adBody .checkmark:after { content: ''; position: absolute; display: none; } .adBodyContainer .adBody .adBodyCheckbox input:checked ~ .checkmark:after { display: block; } #seeDetailsText { margin: 0!important } .adBodyContainer .adBody .adBodyCheckbox .checkmark:after { left: 8px; top: 4px; width: 5px; height: 10px; border: solid white; border-width: 0 3px 3px 0; -webkit-transform: rotate(45deg); -ms-transform: rotate(45deg); transform: rotate(45deg); } .adBodyContainer .adBody .productName { font-size: 17px; font-weight: 700; } .adBodyContainer .adBody .adBodyCheckbox { display: flex; align-items: center; } .adBodyContainer .adBody .adBodyCheckbox input { margin-right: 10px; } .adPriceText { font-size: 17px; color: #ff4f2c; } .adVariants { max-width: 157px; margin-bottom: 2%; } .obBadgeIcon2 { width: 100%; } .obBadgeIcon2 { width: 100%; } </style> <div id='obStreamlined'> <div class='obMainBox' id='obMainDiv'> <div class='obImageDiv-wrapper'> <div id='adminObImageDiv'> <img id='obBadgeImage' src='' class='obBadgeIcon' /> </div> <label class='obBodyCheckbox' id='streamCheck' onclick='obCheckChecked()'> <input id='obCheckbox' type='checkbox' /> <span class='obCheckmark'></span> </label> </div> <div class='obMainText-wrapper obMainText' id='adminObMainText'> <span id='obStBumpText'></span> <span id='adminObPrice'></span> </div> <div onclick='toggleDetails()' id='obMouseWidgetText'> <p id='seeDetailsText'></p> </div> <div id='obDetailsTooltip' class='obSpeechBubbleDs'> <span id='obSeeDetailsMore'></span> </div> </div> </div> <div id='obAdvanced'> <div class='adMainBox' id='adMainDiv'> <div class='adNameDiv' id='adHeadline'> <span class='adName' id='adNameText'></span> <span class='adPriceText' id='adminAdObPrice2'></span> </div> <div class='adBodyContainer'> <div id='adminAdImageDiv'> <img src='' id='adCustomImage' class='obBadgeIcon2' /> </div> <div class='adBody'> <span class='productName' id='adProductName'></span> <span class='adPriceText' id='adminAdObPrice'></span> <select id='adVariantSelection' onchange='checkVariant()'></select> <label class='adBodyCheckbox' id='advanceStream' onclick='obCheckCheckedAdvanced()'> <span id='addToOrderText'></span> <input id='adCheckbox' type='checkbox' /> <span class='checkmark'></span> </label> <div onclick='toggleDetails()' id='adMouseoverText'> <p id='seeDetailsText2'></p> </div> <div id='obAdDetailsTooltip' class='obAdSpeechBubbleDs'> <span id='obSeeDetailsMore2'></span> </div> </div> </div> </div> </div> <div id='obMulti'> <p id='obMultiHeadline'></p> </div> <script> let theVariant; let multiVariant = []; let theAdVariants; let currentPrice; let theVariantArray = []; var streamline = document.getElementById('obStreamlined').innerHTML; var pageType; var triggerId; var dbRef; var splitTest; var subInt; var subUnit; var checkedBackground = '#008000'; var advance = ''; const userId = '{{shop.permanent_domain}}'; const productId = '{{product.id}}'; const cartPageUrl = '{{routes.cart_url}}'; const currentUrl = window.location.href; let cartProduct = '{{ cart.items[0].product.id }}'; const obPriceCurrency = '{{ 455 | money }}'; const obPriceCurrencyEd = '{{ 455 | money }}'; let hideNow = false; function loadObLive() { if ( (window.top.location.href.indexOf('admin') == -1 && window.top.location.href.indexOf('product') > -1) || (window.top.location.href.indexOf('admin') == -1 && window.top.location.href.indexOf('cart') > -1) ) { if (!productId && currentUrl.indexOf(cartPageUrl) > -1) { ('{% for item in cart.items %}'); cartProduct = '{{ item.product.id }}'; ('{% endfor %}'); let productQuery = `gid://shopify/Product/${cartProduct}`; var fbData = { userId: userId, productQuery: productQuery, }; sendRequest({ method: 'POST', params: JSON.stringify(fbData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getBump', }).then(async (data) => { const cartObject = await sendRequest({ method: 'GET', params: '', url: `/cart.js`, }); const currencySymbol = cartObject.currency; let theDbRef = data.id; let theOb = data.data; var getProductData2 = { id: theOb.bumps.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData2), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }).then((data) => { subInt = data.data.product.subInterval; subUnit = data.data.product.subUnit; }); let theCurrentBump = theOb.bumps.id; ('{% for item in cart.items %}'); if (theCurrentBump.indexOf('{{ item.product.id }}') > -1 && theOb.bumpStyleDefault != 'multi') { hideNow = true; } ('{% endfor %}'); if (!hideNow && theOb.cartPage && !theOb.disabled) { if (theOb.bumpStyleDefault === 'streamline') { addImpression('cart', cartProduct, theDbRef, 'streamline'); pageType = 'cart'; triggerId = cartProduct; dbRef = theDbRef; splitTest = 'streamline'; sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }) .then((data) => { document.getElementById( 'adminObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document .getElementById('obStBumpText') .append(adminObPrice); theVariant = data.product.variants[0].id; }) .catch((e) => { var getProductData = { id: theOb.bumps.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }) .then((data) => { obUpdatedHandle = data.data.product.handle; obHandleData = { handle: obUpdatedHandle, id: theOb.bumps.id, path: `${userId}/${theDbRef}`, }; sendRequest({ method: 'POST', params: JSON.stringify(obHandleData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/updateProductHandle', }); sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }).then((data) => { document.getElementById( 'adminObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document .getElementById('obStBumpText') .append(adminObPrice); theVariant = data.product.variants[0].id; }); }) .catch((e) => {}); }); var theForm = document.querySelector(`form[action*='/cart']`); var widget = document.getElementById('obStreamlined'); theForm.parentNode.insertBefore(widget, theForm); document.getElementById('obStreamlined').style.paddingBottom = '10px'; document.getElementById('obStreamlined').style.paddingTop = '10px'; if (theOb.badgeOn) { document .getElementById('adminObImageDiv') .classList.add('obImageDiv'); } else { document .getElementById('adminObImageDiv') .classList.add('hideElement'); } document.getElementById('obBadgeImage').src = theOb.customBadge; document.getElementById( 'obStBumpText' ).textContent = theOb.bumpText.replace('{ product_price }', ''); if (theOb.price) { document .getElementById('adminObPrice') .classList.add('obPriceText'); } else { document .getElementById('adminObPrice') .classList.add('hideElement'); } if (theOb.mouseoverOn) { document .getElementById('obMouseWidgetText') .classList.add('obWidget'); } else { document .getElementById('obMouseWidgetText') .classList.add('hideElement'); } document.getElementById('seeDetailsText').textContent = theOb.mouseoverText; document.getElementById('obSeeDetailsMore').textContent = theOb.calloutText; document.getElementById('addToOrderText').textContent = theOb.addToOrder; changeStyles(theOb).then(() => { var theObElementS = document.getElementById('obStreamlined'); theObElementS.style.width = '100%'; theObElementS.style.maxWidth = '425px'; theObElementS.style.margin = 'auto'; theObElementS.style.display = 'block'; }); } else if (theOb.bumpStyleDefault === 'advance') { addImpression('cart', cartProduct, theDbRef, 'advance'); pageType = 'cart'; triggerId = cartProduct; dbRef = theDbRef; splitTest = 'advance'; sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }) .then((data) => { document.getElementById('adProductName').textContent = data.product.title; document.getElementById( 'adminAdObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document.getElementById( 'adminAdObPrice2' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document .getElementById('adNameText') .append(adminAdObPrice2); theVariant = data.product.variants[0].id; var theSelect = document.getElementById( 'adVariantSelection' ); for (let v of data.product.variants) { var selectOption = document.createElement('option'); selectOption.text = v.title; selectOption.value = v.id; theSelect.add(selectOption); theVariantArray.push({ id: `${v.id}`, price: v.price }); } }) .catch(() => {}); var theForm = document.querySelector(`form[action*='/cart']`); var widget = document.getElementById('obAdvanced'); theForm.parentNode.insertBefore(widget, theForm); document.getElementById('obAdvanced').style.paddingTop = '10px'; document.getElementById('obAdvanced').style.paddingBottom = '10px'; document.getElementById( 'adNameText' ).textContent = theOb.bumpText.replace('{ product_price }', ''); if (theOb.price) { document .getElementById('adminAdObPrice2') .classList.add('obPriceText'); } else { document .getElementById('adminAdObPrice2') .classList.add('hideElement'); } if (theOb.badgeOn) { document .getElementById('adminAdImageDiv') .classList.add('adImage'); } else { document .getElementById('adminAdImageDiv') .classList.add('hideElement'); } if (theOb.variantSelection) { document .getElementById('adVariantSelection') .classList.add('adVariants'); } else { document .getElementById('adVariantSelection') .classList.add('hideElement'); } document.getElementById('adCustomImage').src = theOb.customBadge; if (theOb.mouseoverOn) { document .getElementById('adMouseoverText') .classList.add('obAdWidget'); } else { document .getElementById('adMouseoverText') .classList.add('hideElement'); } document.getElementById('seeDetailsText2').textContent = theOb.mouseoverText; document.getElementById('obSeeDetailsMore2').textContent = theOb.calloutText; document .getElementById('obAdvanced') .append(obAdDetailsTooltip); document.getElementById('addToOrderText').textContent = theOb.addToOrder; changeStyles(theOb).then(() => { var theObElement = document.getElementById('obAdvanced'); theObElement.style.width = '100%'; theObElement.style.maxWidth = '425px'; theObElement.style.margin = 'auto'; theObElement.style.display = 'block'; }); } else { addImpression('product', productId, theDbRef, 'multi'); pageType = 'product'; triggerId = productId; dbRef = theDbRef; splitTest = 'multi'; for (let o of theOb.additionalBumps) { let innerHtml = ` <div class='obMainBox' id='obMainDiv${o.handle}'> <div class='obImageDiv-wrapper'> <div id='adminObImageDiv${o.handle}'> <img id='obBadgeImage${o.handle}' src='' class='obBadgeIcon' /> </div> <label class='obBodyCheckbox' id='streamCheck${o.handle}' onclick='event.preventDefault(); obCheckCheckedMulti("${o.handle}")'> <input id='obCheckbox${o.handle}' type='checkbox' /> <span class='obCheckmark'></span> </label> </div> <div class='obMainText-wrapper obMainText' id='adminObMainText${o.handle}'> <span id='obStBumpText${o.handle}'></span> <span id='adminObPrice${o.handle}'></span> </div> </div> `; document.getElementById('obMulti').innerHTML += innerHtml; sendRequest({ method: 'GET', params: '', url: `/products/${o.handle}.json`, }) .then((data) => { console.log(data); document.getElementById( `adminObPrice${o.handle}` ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); multiVariant.push({handle: o.handle, id: data.product.variants[0].id}); }) .catch((e) => { var getProductData = { id: o.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }) .then((data) => { obUpdatedHandle = data.data.product.handle; obHandleData = { handle: obUpdatedHandle, id: o.id, path: `${userId}/${theDbRef}`, }; sendRequest({ method: 'POST', params: JSON.stringify(obHandleData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/updateProductHandle', }); sendRequest({ method: 'GET', params: '', url: `/products/${o.handle}.json`, }).then((data) => { let thePrice = document.getElementById( `adminObPrice${o.handle}` ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); multiVariant.push({handle: o.handle, id: data.product.variants[0].id}); }); }) .catch((e) => {}); }); document.getElementById(`obBadgeImage${o.handle}`).src = o.bumpImage; document.getElementById( `obStBumpText${o.handle}` ).textContent = o.text.replace(`{ product_price }`, ''); if (theOb.price) { document .getElementById(`adminObPrice${o.handle}`) .classList.add('obPriceText'); } else { document .getElementById(`adminObPrice${o.handle}`) .classList.add('hideElement'); } let handle = o.handle; document.getElementById('obMultiHeadline').textContent = theOb.multiHeadline; document.getElementById(`adminObMainText${handle}`).style.justifyContent = theOb.bumpTextAlign; document.getElementById(`obMainDiv${handle}`).style.color = theOb.textColor; document.getElementById(`adminObPrice${handle}`).style.color = theOb.priceColor; document.getElementById(`obMulti`).style.background = theOb.boxFillColor; document.getElementById(`adminObImageDiv${handle}`).style.justifyContent = theOb.badgeAlignment; document.getElementById( `obMulti` ).style.paddingTop = `${theOb.boxTopPadding}px`; document.getElementById( `obMulti` ).style.paddingBottom = `${theOb.boxBottomPadding}px`; document.getElementById( `obMulti` ).style.paddingLeft = `${theOb.boxLeftPadding}px`; document.getElementById( `obMulti` ).style.paddingRight = `${theOb.boxRightPadding}px`; document.getElementById(`obMulti`).style.borderColor = theOb.borderColor; document.getElementById(`obMulti`).style.borderStyle = theOb.borderType; document.getElementById( `obMulti` ).style.borderWidth = `${theOb.borderThickness}px`; checkedBackground = theOb.checkColor; if (theOb.bumpTextAlign === `flex-start`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `left`; } else if (theOb.bumpTextAlign === `center`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `center`; } else if (theOb.bumpTextAlign === `flex-end`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `right`; } } var theForm = document.querySelector(`form[action*='/cart']`); var obMultiHeadline = document.getElementById('obMultiHeadline'); var widget = document.getElementById('obMulti'); theForm.parentNode.insertBefore(widget, theForm); widget.parentNode.insertBefore(obMultiHeadline, widget); if (theOb.badgeOn) { document .getElementById('adminObImageDiv') .classList.add('obImageDiv'); } else { document .getElementById('adminObImageDiv') .classList.add('hideElement'); } var theObElement = document.getElementById('obMulti'); theObElement.style.width = '100%'; theObElement.style.maxWidth = '425px'; theObElement.style.margin = 'auto'; theObElement.style.display = 'block'; } }; }); } else if (productId && currentUrl.indexOf(cartPageUrl) < 0) { let productQuery = `gid://shopify/Product/${productId}`; var fbData = { userId: userId, productQuery: productQuery, }; sendRequest({ method: 'POST', params: JSON.stringify(fbData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getBump', }).then(async (data) => { const cartObject = await sendRequest({ method: 'GET', params: '', url: `/cart.js`, }); const currencySymbol = cartObject.currency; let theDbRef = data.id; let theOb = data.data; var getProductData2 = { id: theOb.bumps.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData2), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }).then((data) => { subInt = data.data.product.subInterval; subUnit = data.data.product.subUnit; }); if (theOb.productPage && !theOb.disabled) { if (theOb.bumpStyleDefault === 'streamline') { addImpression('product', productId, theDbRef, 'streamline'); pageType = 'product'; triggerId = productId; dbRef = theDbRef; splitTest = 'streamline'; sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }) .then((data) => { document.getElementById( 'adminObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document.getElementById('obStBumpText').append(adminObPrice); theVariant = data.product.variants[0].id; }) .catch((e) => { var getProductData = { id: theOb.bumps.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }) .then((data) => { obUpdatedHandle = data.data.product.handle; obHandleData = { handle: obUpdatedHandle, id: theOb.bumps.id, path: `${userId}/${theDbRef}`, }; sendRequest({ method: 'POST', params: JSON.stringify(obHandleData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/updateProductHandle', }); sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }).then((data) => { document.getElementById( 'adminObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document .getElementById('obStBumpText') .append(adminObPrice); theVariant = data.product.variants[0].id; }); }) .catch((e) => {}); }); var theForm = document.querySelector(`form[action*='/cart/add']`); var theFormButton = theForm.querySelector( `button[type='submit']` ); var widget = document.getElementById('obStreamlined'); if (!theFormButton) { theFormButton = theForm.querySelector(`button[name='add']`); } if (!theFormButton) { theFormButton = theForm.querySelector(`input[type='submit']`); } if (!theFormButton) { theFormButton = document.getElementsByClassName('btn-addtocart')[0]; } if (!theFormButton) { theFormButton = document.getElementsByClassName('product-form__buttons')[0]; } theFormButton.parentNode.insertBefore(widget, theFormButton); if (theOb.badgeOn) { document .getElementById('adminObImageDiv') .classList.add('obImageDiv'); } else { document .getElementById('adminObImageDiv') .classList.add('hideElement'); } document.getElementById('obBadgeImage').src = theOb.customBadge; document.getElementById( 'obStBumpText' ).textContent = theOb.bumpText.replace('{ product_price }', ''); if (theOb.price) { document .getElementById('adminObPrice') .classList.add('obPriceText'); } else { document .getElementById('adminObPrice') .classList.add('hideElement'); } if (theOb.mouseoverOn) { document .getElementById('obMouseWidgetText') .classList.add('obWidget'); } else { document .getElementById('obMouseWidgetText') .classList.add('hideElement'); } document.getElementById('seeDetailsText').textContent = theOb.mouseoverText; document.getElementById('obSeeDetailsMore').textContent = theOb.calloutText; document.getElementById('addToOrderText').textContent = theOb.addToOrder; changeStyles(theOb).then(() => { document.getElementById('obStreamlined').style.display = 'block'; }); } else if (theOb.bumpStyleDefault === 'advance') { addImpression('product', productId, theDbRef, 'advance'); pageType = 'product'; triggerId = productId; dbRef = theDbRef; splitTest = 'advance'; sendRequest({ method: 'GET', params: '', url: `/products/${theOb.bumps.handle}.json`, }) .then((data) => { document.getElementById('adProductName').textContent = data.product.title; document.getElementById( 'adminAdObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document.getElementById( 'adminAdObPrice2' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); document.getElementById('adNameText').append(adminAdObPrice2); theVariant = data.product.variants[0].id; var theSelect = document.getElementById('adVariantSelection'); for (let v of data.product.variants) { var selectOption = document.createElement('option'); selectOption.text = v.title; selectOption.value = v.id; theSelect.add(selectOption); theVariantArray.push({ id: `${v.id}`, price: v.price }); } }) .catch(() => {}); var theForm = document.querySelector(`form[action*='/cart/add']`); var theFormButton = theForm.querySelector( `button[type='submit']` ); var widget = document.getElementById('obAdvanced'); if (!theFormButton) { theFormButton = theForm.querySelector(`button[name='add']`); } if (!theFormButton) { theFormButton = theForm.querySelector(`input[type='submit']`); }; if (!theFormButton) { theFormButton = document.getElementsByClassName('btn-addtocart')[0]; } if (!theFormButton) { theFormButton = document.getElementsByClassName('product-form__buttons')[0]; } theFormButton.parentNode.insertBefore(widget, theFormButton); document.getElementById( 'adNameText' ).textContent = theOb.bumpText.replace('{ product_price }', ''); if (theOb.price) { document .getElementById('adminAdObPrice2') .classList.add('obPriceText'); } else { document .getElementById('adminAdObPrice2') .classList.add('hideElement'); } if (theOb.badgeOn) { document .getElementById('adminAdImageDiv') .classList.add('adImage'); } else { document .getElementById('adminAdImageDiv') .classList.add('hideElement'); } if (theOb.variantSelection) { document .getElementById('adVariantSelection') .classList.add('adVariants'); } else { document .getElementById('adVariantSelection') .classList.add('hideElement'); } document.getElementById('adCustomImage').src = theOb.customBadge; if (theOb.mouseoverOn) { document .getElementById('adMouseoverText') .classList.add('obAdWidget'); } else { document .getElementById('adMouseoverText') .classList.add('hideElement'); } document.getElementById('seeDetailsText2').textContent = theOb.mouseoverText; document.getElementById('obSeeDetailsMore2').textContent = theOb.calloutText; document.getElementById('obAdvanced').append(obAdDetailsTooltip); document.getElementById('addToOrderText').textContent = theOb.addToOrder; changeStyles(theOb).then(() => { document.getElementById('obAdvanced').style.display = 'block'; }); } else { addImpression('product', productId, theDbRef, 'multi'); pageType = 'product'; triggerId = productId; dbRef = theDbRef; splitTest = 'multi'; for (let o of theOb.additionalBumps) { let innerHtml = ` <div class='obMainBox' id='obMainDiv${o.handle}'> <div class='obImageDiv-wrapper'> <div id='adminObImageDiv${o.handle}'> <img id='obBadgeImage${o.handle}' src='' class='obBadgeIcon' /> </div> <label class='obBodyCheckbox' id='streamCheck${o.handle}' onclick='event.preventDefault(); obCheckCheckedMulti("${o.handle}")'> <input id='obCheckbox${o.handle}' type='checkbox' /> <span class='obCheckmark'></span> </label> </div> <div class='obMainText-wrapper obMainText' id='adminObMainText${o.handle}'> <span id='obStBumpText${o.handle}'></span> <span id='adminObPrice${o.handle}'></span> </div> </div> `; document.getElementById('obMulti').innerHTML += innerHtml; sendRequest({ method: 'GET', params: '', url: `/products/${o.handle}.json`, }) .then((data) => { console.log(data); document.getElementById( `adminObPrice${o.handle}` ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); multiVariant.push({handle: o.handle, id: data.product.variants[0].id}); }) .catch((e) => { var getProductData = { id: o.id, store: userId, }; sendRequest({ method: 'POST', params: JSON.stringify(getProductData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/getSingleProductFrontEnd', }) .then((data) => { obUpdatedHandle = data.data.product.handle; obHandleData = { handle: obUpdatedHandle, id: o.id, path: `${userId}/${theDbRef}`, }; sendRequest({ method: 'POST', params: JSON.stringify(obHandleData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/updateProductHandle', }); sendRequest({ method: 'GET', params: '', url: `/products/${o.handle}.json`, }).then((data) => { let thePrice = document.getElementById( `adminObPrice${o.handle}` ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); multiVariant.push({handle: o.handle, id: data.product.variants[0].id}); }); }) .catch((e) => {}); }); document.getElementById(`obBadgeImage${o.handle}`).src = o.bumpImage; document.getElementById( `obStBumpText${o.handle}` ).textContent = o.text.replace(`{ product_price }`, ''); if (theOb.price) { document .getElementById(`adminObPrice${o.handle}`) .classList.add('obPriceText'); } else { document .getElementById(`adminObPrice${o.handle}`) .classList.add('hideElement'); } let handle = o.handle; document.getElementById('obMultiHeadline').textContent = theOb.multiHeadline; document.getElementById(`adminObMainText${handle}`).style.justifyContent = theOb.bumpTextAlign; document.getElementById(`obMainDiv${handle}`).style.color = theOb.textColor; document.getElementById(`adminObPrice${handle}`).style.color = theOb.priceColor; document.getElementById(`obMulti`).style.background = theOb.boxFillColor; document.getElementById(`adminObImageDiv${handle}`).style.justifyContent = theOb.badgeAlignment; document.getElementById( `obMulti` ).style.paddingTop = `${theOb.boxTopPadding}px`; document.getElementById( `obMulti` ).style.paddingBottom = `${theOb.boxBottomPadding}px`; document.getElementById( `obMulti` ).style.paddingLeft = `${theOb.boxLeftPadding}px`; document.getElementById( `obMulti` ).style.paddingRight = `${theOb.boxRightPadding}px`; document.getElementById(`obMulti`).style.borderColor = theOb.borderColor; document.getElementById(`obMulti`).style.borderStyle = theOb.borderType; document.getElementById( `obMulti` ).style.borderWidth = `${theOb.borderThickness}px`; checkedBackground = theOb.checkColor; if (theOb.bumpTextAlign === `flex-start`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `left`; } else if (theOb.bumpTextAlign === `center`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `center`; } else if (theOb.bumpTextAlign === `flex-end`) { document.getElementById(`adminObMainText${handle}`).style.textAlign = `right`; } } var theForm = document.querySelector(`form[action*='/cart/add']`); var theFormButton = theForm.querySelector( `button[type='submit']` ); var obMultiHeadline = document.getElementById('obMultiHeadline'); var widget = document.getElementById('obMulti'); if (!theFormButton) { theFormButton = theForm.querySelector(`button[name='add']`); } if (!theFormButton) { theFormButton = theForm.querySelector(`input[type='submit']`); } if (!theFormButton) { theFormButton = document.getElementsByClassName('btn-addtocart')[0]; } if (!theFormButton) { theFormButton = document.getElementsByClassName('product-form__buttons')[0]; } theFormButton.parentNode.insertBefore(widget, theFormButton); widget.parentNode.insertBefore(obMultiHeadline, widget); if (theOb.badgeOn) { document .getElementById('adminObImageDiv') .classList.add('obImageDiv'); } else { document .getElementById('adminObImageDiv') .classList.add('hideElement'); } document.getElementById('obMulti').style.display = 'block'; } } }); } } } function obCheckChecked() { var isChecked = document.getElementById('obCheckbox').checked; if (!isChecked) { document.getElementById('obCheckbox').checked = true; document.querySelector( '.obImageDiv-wrapper .obBodyCheckbox input:checked~.obCheckmark' ).style.background = checkedBackground; obAddItem(); addAtc(pageType, triggerId, dbRef, splitTest); } else { document.getElementById('obCheckbox').checked = false; document.querySelector( '.obImageDiv-wrapper .obBodyCheckbox input~.obCheckmark' ).style.background = '#ffffff'; obRemoveItem(); } } function obCheckCheckedMulti(ob) { for (let m of multiVariant) { if (m.handle === ob) { var isChecked = document.getElementById(`obCheckbox${m.handle}`).checked; if (!isChecked) { document.getElementById(`obCheckbox${m.handle}`).checked = true; document.querySelector( '.obImageDiv-wrapper .obBodyCheckbox input:checked~.obCheckmark' ).style.background = checkedBackground; obAddItemMulti(m.id); addAtc(pageType, triggerId, dbRef, splitTest); } else { document.getElementById(`obCheckbox${m.handle}`).checked = false; document.querySelector( '.obImageDiv-wrapper .obBodyCheckbox input~.obCheckmark' ).style.background = '#ffffff'; obRemoveItemMulti(m.id); } } } } function obAddItem() { if(false) { addSubProduct(); } else { sendRequest({ method: 'POST', params: JSON.stringify({ items: [ { quantity: 1, id: theVariant, }, ], }), url: '/cart/add.js', }) .then((e) => { const data = {}; data.attributes = { obOfferT: triggerId, obOfferU: dbRef, obOfferP: pageType, obOfferS: splitTest, obOfferV: theVariant, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => { if (currentUrl.indexOf(cartPageUrl) > -1) { window.location.reload(); } }) .catch((e) => {}); }) .catch((e) => {}); } } function addSubProduct() { sendRequest({ method: 'POST', params: JSON.stringify({ items: [ { quantity: 1, id: theVariant, properties: { shipping_interval_frequency: subInt.value, shipping_interval_unit_type: subUnit.value } }, ], }), url: '/cart/add.js', }) .then((e) => { const data = {}; data.attributes = { obOfferT: triggerId, obOfferU: dbRef, obOfferP: pageType, obOfferS: splitTest, obOfferV: theVariant, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => { if (currentUrl.indexOf(cartPageUrl) > -1) { window.location.reload(); } }) .catch((e) => {}); }) .catch((e) => {}); } function obAddItemMulti(v) { if(false) { addSubProductMulit(v); } else { sendRequest({ method: 'POST', params: JSON.stringify({ items: [ { quantity: 1, id: v, }, ], }), url: '/cart/add.js', }) .then((e) => { const data = {}; data.attributes = { obOfferT: triggerId, obOfferU: dbRef, obOfferP: pageType, obOfferS: splitTest, obOfferV: v, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => { if (currentUrl.indexOf(cartPageUrl) > -1) { window.location.reload(); } }) .catch((e) => {console.log(e)}); }) .catch((e) => {}); } } function addSubProductMulti(v) { sendRequest({ method: 'POST', params: JSON.stringify({ items: [ { quantity: 1, id: v, properties: { shipping_interval_frequency: subInt.value, shipping_interval_unit_type: subUnit.value } }, ], }), url: '/cart/add.js', }) .then((e) => { const data = {}; data.attributes = { obOfferT: triggerId, obOfferU: dbRef, obOfferP: pageType, obOfferS: splitTest, obOfferV: v, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => { if (currentUrl.indexOf(cartPageUrl) > -1) { window.location.reload(); } }) .catch((e) => {}); }) .catch((e) => {}); } function obCheckCheckedAdvanced() { var isChecked = document.getElementById('adCheckbox').checked; if (!isChecked) { document.getElementById('adCheckbox').checked = true; document.querySelector( '.adBodyContainer .adBody .adBodyCheckbox input:checked~.checkmark' ).style.background = checkedBackground; obAddItemAdvanced(); } else { document.getElementById('adCheckbox').checked = false; document.querySelector( '.adBodyContainer .adBody .adBodyCheckbox input~.checkmark' ).style.background = '#ffffff'; obRemoveItemAdvanced(); } } function obAddItemAdvanced() { if (false) { addAtc(pageType, triggerId, dbRef, splitTest); addSubProduct(); } else { addAtc(pageType, triggerId, dbRef, splitTest); sendRequest({ method: 'POST', params: JSON.stringify({ items: [ { quantity: 1, id: theVariant, }, ], }), url: '/cart/add.js', }) .then((e) => { const data = {}; data.attributes = { obOfferT: triggerId, obOfferU: dbRef, obOfferP: pageType, obOfferS: splitTest, obOfferV: theVariant, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => { if (currentUrl.indexOf(cartPageUrl) > -1) { window.location.reload(); } }) .catch((e) => {}); }) .catch((e) => {}); } } function obRemoveItemAdvanced() { const data = { updates: {} }; data.updates[theVariant] = 0; data.attributes = { obOfferT: null, obOfferU: null, obOfferP: null, obOfferS: null, obOfferV: null, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => {}) .catch((e) => {}); } function obRemoveItem() { const data = { updates: {} }; data.updates[theVariant] = 0; data.attributes = { obOfferT: null, obOfferU: null, obOfferP: null, obOfferS: null, obOfferV: null, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => {}) .catch((e) => {}); } function obRemoveItemMulti(v) { const data = { updates: {} }; data.updates[v] = 0; data.attributes = { obOfferT: null, obOfferU: null, obOfferP: null, obOfferS: null, obOfferV: null, }; sendRequest({ method: 'POST', params: JSON.stringify(data), url: '/cart/update.js', }) .then((d) => {}) .catch((e) => {}); } function toggleDetails() { let tooltipElement = document.getElementById('obDetailsTooltip'); tooltipElement.classList.toggle('active'); let tooltipElementAd = document.getElementById('obAdDetailsTooltip'); tooltipElementAd.classList.toggle('active'); } function checkVariant() { var isCheckedD = document.getElementById('adCheckbox').checked; if (isCheckedD) { obRemoveItemAdvanced().then(() => { theVariant = document.getElementById('adVariantSelection').value; obAddItemAdvanced(); }); } else { theVariant = document.getElementById('adVariantSelection').value; document.getElementById('adCheckbox').checked = true; obAddItemAdvanced(); } for (let v of theVariantArray) { if (v.id == theVariant) { document.getElementById( 'adminAdObPrice' ).textContent = getPriceCurrency( currencySymbol, data.product.variants[0].price ); } } } function addImpression(pageType, triggerProductId, dbRef, splitTest) { const shopForDb = userId.replace(/[.]|https:|http:|www|/g, ''); const theImpressionData = { timestamp: new Date().getTime(), triggerProduct: triggerProductId, upsellId: dbRef, pageType: pageType, splitTestId: splitTest, }; var impressionData = { impressionData: theImpressionData, store: shopForDb, }; sendRequest({ method: 'POST', params: JSON.stringify(impressionData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/addImpression', }); } function addAtc(pageType, triggerProductId, dbRef, splitTest) { const shopForDb = userId.replace(/[.]|https:|http:|www|/g, ''); const atcData = { timestamp: new Date().getTime(), triggerProduct: triggerProductId, upsellId: dbRef, pageType: pageType, splitTestId: splitTest, }; var cartData = { atcData: atcData, store: shopForDb, }; sendRequest({ method: 'POST', params: JSON.stringify(cartData), url: 'https://us-central1-sweet-order-bump.cloudfunctions.net/addAtc', }); } function sendRequest({ method, params = '', url }) { return new Promise((resolve, reject) => { try { const XHR = new XMLHttpRequest(); XHR.open(method, url, true); XHR.setRequestHeader('Content-type', 'application/json'); XHR.onreadystatechange = () => { if (XHR.readyState === 4 && XHR.status === 200) { const json = JSON.parse(XHR.responseText); resolve(json); } else if (XHR.readyState === 4 && XHR.status !== 200) { reject('Error'); } }; XHR.send(params); } catch (error) { reject(error.message); } }); } function changeStyles(bump) { return new Promise((resolve) => { document.getElementById('adminObMainText').style.justifyContent = bump.bumpTextAlign; document.getElementById('adHeadline').style.justifyContent = bump.bumpTextAlign; document.getElementById('obMainDiv').style.color = bump.textColor; document.getElementById('adMainDiv').style.color = bump.textColor; document.getElementById('adminObPrice').style.color = bump.priceColor; document.getElementById('adminAdObPrice').style.color = bump.priceColor; document.getElementById('adminAdObPrice2').style.color = bump.priceColor; document.getElementById('obMainDiv').style.background = bump.boxFillColor; document.getElementById('adMainDiv').style.background = bump.boxFillColor; document.getElementById('obDetailsTooltip').style.color = bump.calloutTextColor; document.getElementById('obAdDetailsTooltip').style.color = bump.calloutTextColor; document.getElementById('obDetailsTooltip').style.background = bump.calloutFillColor; document.getElementById('obAdDetailsTooltip').style.background = bump.calloutFillColor; document.getElementById('adminObImageDiv').style.justifyContent = bump.badgeAlignment; document.getElementById('obDetailsTooltip').style.textAlign = bump.mouseoverAlignment; document.getElementById('obAdDetailsTooltip').style.textAlign = bump.mouseoverAlignment; document.getElementById( 'obMainDiv' ).style.paddingTop = `${bump.boxTopPadding}px`; document.getElementById( 'adMainDiv' ).style.paddingTop = `${bump.boxTopPadding}px`; document.getElementById( 'obMainDiv' ).style.paddingBottom = `${bump.boxBottomPadding}px`; document.getElementById( 'adMainDiv' ).style.paddingBottom = `${bump.boxBottomPadding}px`; document.getElementById( 'obMainDiv' ).style.paddingLeft = `${bump.boxLeftPadding}px`; document.getElementById( 'adMainDiv' ).style.paddingLeft = `${bump.boxLeftPadding}px`; document.getElementById( 'obMainDiv' ).style.paddingRight = `${bump.boxRightPadding}px`; document.getElementById( 'adMainDiv' ).style.paddingRight = `${bump.boxRightPadding}px`; document.getElementById( 'obDetailsTooltip' ).style.paddingLeft = `${bump.mouseoverLeftPadding}px`; document.getElementById( 'obAdDetailsTooltip' ).style.paddingLeft = `${bump.mouseoverLeftPadding}px`; document.getElementById( 'obDetailsTooltip' ).style.paddingRight = `${bump.mouseoverRightPadding}px`; document.getElementById( 'obAdDetailsTooltip' ).style.paddingRight = `${bump.mouseoverRightPadding}px`; document.getElementById( 'obDetailsTooltip' ).style.paddingTop = `${bump.mouseoverTopPadding}px`; document.getElementById( 'obAdDetailsTooltip' ).style.paddingTop = `${bump.mouseoverTopPadding}px`; document.getElementById( 'obDetailsTooltip' ).style.paddingBottom = `${bump.mouseoverBottomPadding}px`; document.getElementById( 'obAdDetailsTooltip' ).style.paddingBottom = `${bump.mouseoverBottomPadding}px`; document.getElementById('obMainDiv').style.borderColor = bump.borderColor; document.getElementById('adMainDiv').style.borderColor = bump.borderColor; document.getElementById('obMainDiv').style.borderStyle = bump.borderType; document.getElementById('adMainDiv').style.borderStyle = bump.borderType; document.getElementById( 'obMainDiv' ).style.borderWidth = `${bump.borderThickness}px`; document.getElementById( 'adMainDiv' ).style.borderWidth = `${bump.borderThickness}px`; checkedBackground = bump.checkColor; if (bump.bumpTextAlign === 'flex-start') { document.getElementById('adminObMainText').style.textAlign = 'left'; document.getElementById('adHeadline').style.textAlign = 'left'; } else if (bump.bumpTextAlign === 'center') { document.getElementById('adminObMainText').style.textAlign = 'center'; document.getElementById('adHeadline').style.textAlign = 'center'; } else if (bump.bumpTextAlign === 'flex-end') { document.getElementById('adminObMainText').style.textAlign = 'right'; document.getElementById('adHeadline').style.textAlign = 'right'; } setTimeout(() => { resolve(); }, 500); }); } const obCurrencySymbols2 = { USD: '$', EUR: '€', GBP: '£', CAD: '$', ARS: '$', AUD: '$', BRL: 'R$ ', CLP: '$', CNY: '¥', CZK: ' Kč', DKK: ' kr', HKD: '$', HUF: 'ft', ISK: ' kr', INR: 'Rs. ', JMD: '$', JPY: '¥', MXN: '$ ', NZD: '$', NOK: ' kr', PLN: ' zl', SGD: '$', ZAR: 'R ', KRW: '₩', SEK: ' kr', CHF: 'SFr. ', TWD: '$', UYU: '$', MYR: 'RM', BSD: 'BS$', CRC: '₡ ', RON: ' lei', PHP: '₱', AED: 'Dhs. ', TRY: 'TL', THB: ' ฿', TTD: '$', ILS: ' NIS', XCD: '$', COP: '$', RUB: 'руб', HRK: ' kn', KZT: ' KZT', TZS: ' TZS', SAR: ' SR', NIO: 'C$', LAK: '₭', AMD: ' AMD', CDF: 'FC', KHR: 'KHR', MVR: 'Rf', GTQ: 'Q', BZD: 'BZ$', DZD: 'DA ', BIF: 'FBu. ', GIP: '£', BOB: 'Bs', XOF: 'CFA', STD: 'Db ', NGN: '₦', PGK: 'K ', MWK: 'Mk', GMD: 'D ', CVE: '$', XAF: 'FCFA', UGX: 'Ush ', MAD: ' dh', MNT: ' ₮', LSL: 'M', TOP: '$', SHP: '£', RSD: ' RSD', HTG: 'G ', MZN: ' Mt', FKP: '£', BWP: 'P', HNL: 'L ', PYG: 'Gs. ', EGP: 'LE ', LBP: 'L£', ANG: 'ƒ ', WST: 'WS$ ', GYD: 'G$', NPR: 'Rs', KMF: ' CF', SRD: 'SRD ', SZL: 'L ', MOP: 'MOP$', BMD: 'BD$', XPF: ' XPF', MDL: ' MDL', YER: ' YER', BAM: 'KM ', PEN: 'S/. ', SLL: 'Le ', KYD: '$', AOA: 'Kz', TJS: 'TJS ', SCR: 'Rs ', LKR: 'Rs ', DJF: ' Fdj', GNF: 'FG ', VUV: '$', GEL: ' GEL', FJD: '$', DOP: 'RD$ ', MUR: 'Rs ', MMK: 'K', LRD: 'L$', BBD: '$', VND: '₫', UAH: '₴', BGN: ' лв', KGS: 'лв', RWF: ' RF', UZS: ' som', PKR: 'Rs.', MKD: 'Ден ', AFN: '؋', NAD: 'N$', BDT: 'Tk ', AZN: 'm.', QAR: 'QAR ', PAB: 'B/. ', SBD: '$', ALL: 'Lek ', BND: '$', ZMW: 'K', AWG: 'Afl', ETB: 'Br', }; const currencyOrientation2 = { USD: 'left', EUR: 'left', GBP: 'left', CAD: 'left', ARS: 'left', AUD: 'left', BRL: 'left', CLP: 'left', CNY: 'left', CZK: 'right', DKK: 'right', HKD: 'left', HUF: 'left', ISK: 'right', INR: 'left', JMD: 'left', JPY: 'left', MXN: 'left', NZD: 'left', NOK: 'right', PLN: 'right', SGD: 'left', ZAR: 'left', KRW: 'right', SEK: 'right', CHF: 'left', TWD: 'left', UYU: 'left', MYR: 'left', BSD: 'left', CRC: 'left', RON: 'right', PHP: 'left', AED: 'left', TRY: 'right', THB: 'right', TTD: 'left', ILS: 'right', XCD: 'left', COP: 'left', RUB: 'left', HRK: 'right', KZT: 'right', TZS: 'right', SAR: 'right', NIO: 'left', LAK: 'left', AMD: 'right', CDF: 'left', KHR: 'left', MVR: 'left', GTQ: 'left', BZD: 'left', DZD: 'left', BIF: 'left', GIP: 'left', BOB: 'left', XOF: 'left', STD: 'left', NGN: 'left', PGK: 'left', MWK: 'left', GMD: 'left', CVE: 'right', XAF: 'left', UGX: 'left', MAD: 'right', MNT: 'right', LSL: 'left', TOP: 'left', SHP: 'left', RSD: 'right', HTG: 'left', MZN: 'right', FKP: 'left', BWP: 'left', HNL: 'left', PYG: 'left', EGP: 'left', LBP: 'left', ANG: 'left', WST: 'left', GYD: 'left', NPR: 'left', KMF: 'right', SRD: 'left', SZL: 'left', MOP: 'left', BMD: 'left', XPF: 'right', MDL: 'right', YER: 'right', BAM: 'left', PEN: 'left', SLL: 'left', KYD: 'left', AOA: 'left', TJS: 'left', SCR: 'left', LKR: 'left', DJF: 'right', GNF: 'left', VUV: 'left', GEL: 'right', FJD: 'left', DOP: 'left', MUR: 'left', MMK: 'left', LRD: 'left', BBD: 'left', VND: 'right', UAH: 'left', BGN: 'right', KGS: 'left', RWF: 'right', UZS: 'right', PKR: 'left', MKD: 'left', AFN: 'right', NAD: 'left', BDT: 'left', AZN: 'left', QAR: 'left', PAB: 'left', SBD: 'left', ALL: 'left', BND: 'left', ZMW: 'left', AWG: 'left', ETB: 'left', }; function getPriceCurrency(currencyName, price) { if (obCurrencySymbols2[currencyName]) { const symbol = obCurrencySymbols2[currencyName]; let orientation; if (currencyOrientation2[currencyName]) { orientation = currencyOrientation2[currencyName]; } else { orientation = 'left'; } if (orientation === 'left') { return `${symbol}${price}`; } else { return `${price}${symbol}`; } } else { return price; } } </script>